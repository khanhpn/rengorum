{"ast":null,"code":"import _classCallCheck from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/khanhpn/Project/freelancer/rengorum/frontend/src/components/thread/index.js\";\nimport React, { Component } from 'react';\nimport { Segment, Icon } from 'semantic-ui-react';\nimport StatusMessage from '../statusmessage';\nimport Post from '../post';\nimport NewPost from '../newpost';\nimport './styles.css';\n\nvar Thread =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Thread, _Component);\n\n  function Thread() {\n    _classCallCheck(this, Thread);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Thread).apply(this, arguments));\n  }\n\n  _createClass(Thread, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          isLoading = _this$props.isLoading,\n          name = _this$props.name,\n          content = _this$props.content,\n          pinned = _this$props.pinned,\n          creator = _this$props.creator,\n          createdAt = _this$props.createdAt,\n          posts = _this$props.posts,\n          error = _this$props.error,\n          isAuthenticated = _this$props.isAuthenticated,\n          createPost = _this$props.createPost,\n          newPostSuccess = _this$props.newPostSuccess,\n          newPostLoading = _this$props.newPostLoading,\n          newPostError = _this$props.newPostError,\n          authenticatedUsername = _this$props.authenticatedUsername,\n          authenticatedIsStaff = _this$props.authenticatedIsStaff,\n          deletePostList = _this$props.deletePostList,\n          deletePost = _this$props.deletePost,\n          isDeleting = _this$props.isDeleting,\n          deleteError = _this$props.deleteError,\n          deleteThread = _this$props.deleteThread;\n\n      if (error || deleteError || isLoading || isDeleting || !name) {\n        var loadingMessage = 'We are fetching the thread for you';\n\n        if (isDeleting) {\n          loadingMessage = 'We are deleting the thread for you';\n        }\n\n        return React.createElement(StatusMessage, {\n          error: error || deleteError || !name // because a thread name cannot be empty\n          ,\n          errorClassName: \"thread-error\",\n          errorMessage: error || deleteError,\n          loading: isLoading || isDeleting,\n          loadingMessage: loadingMessage,\n          nothing: !name,\n          nothingMessage: 'Thread does not exist',\n          type: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      }\n\n      var threadPost = React.createElement(Post, {\n        id: id,\n        threadID: id,\n        isThread: true,\n        content: content,\n        createdAt: createdAt,\n        creator: creator,\n        authenticatedUsername: authenticatedUsername,\n        authenticatedIsStaff: authenticatedIsStaff,\n        deleteAction: deleteThread,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n      var postsList = posts.length === 0 ? null : posts.map(function (post) {\n        var postID = post.id,\n            postContent = post.content,\n            postCreatedAt = post.created_at,\n            postCreator = post.creator;\n        return React.createElement(Post, {\n          key: postID,\n          threadID: id,\n          id: postID,\n          isThread: false,\n          content: postContent,\n          createdAt: postCreatedAt,\n          creator: postCreator,\n          authenticatedUsername: authenticatedUsername,\n          authenticatedIsStaff: authenticatedIsStaff,\n          deletePostList: deletePostList,\n          deleteAction: deletePost,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"threadContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"thread-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: pinned ? 'pin' : 'talk outline',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), name), React.createElement(Segment.Group, {\n        className: \"thread-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, threadPost, postsList), React.createElement(NewPost, {\n        isAuthenticated: isAuthenticated,\n        threadID: id,\n        createPost: createPost,\n        success: newPostSuccess,\n        isLoading: newPostLoading,\n        error: newPostError,\n        maxLength: 2000,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Thread;\n}(Component);\n\nexport { Thread as default };","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/components/thread/index.js"],"names":["React","Component","Segment","Icon","StatusMessage","Post","NewPost","Thread","props","id","isLoading","name","content","pinned","creator","createdAt","posts","error","isAuthenticated","createPost","newPostSuccess","newPostLoading","newPostError","authenticatedUsername","authenticatedIsStaff","deletePostList","deletePost","isDeleting","deleteError","deleteThread","loadingMessage","threadPost","postsList","length","map","post","postID","postContent","postCreatedAt","created_at","postCreator"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Segment, Icon} from 'semantic-ui-react';\r\nimport StatusMessage from '../statusmessage';\r\nimport Post from '../post';\r\nimport NewPost from '../newpost';\r\nimport './styles.css';\r\n\r\nexport default class Thread extends Component {\r\n  render() {\r\n    const {\r\n      id,\r\n      isLoading,\r\n      name,\r\n      content,\r\n      pinned,\r\n      creator,\r\n      createdAt,\r\n      posts,\r\n      error,\r\n      isAuthenticated,\r\n      createPost,\r\n      newPostSuccess,\r\n      newPostLoading,\r\n      newPostError,\r\n      authenticatedUsername,\r\n      authenticatedIsStaff,\r\n      deletePostList,\r\n      deletePost,\r\n      isDeleting,\r\n      deleteError,\r\n      deleteThread,\r\n    } = this.props;\r\n\r\n    if (error || deleteError || isLoading || isDeleting || !name) {\r\n      let loadingMessage = 'We are fetching the thread for you';\r\n      if (isDeleting) {\r\n        loadingMessage = 'We are deleting the thread for you';\r\n      }\r\n      return (\r\n        <StatusMessage\r\n          error={error || deleteError || !name} // because a thread name cannot be empty\r\n          errorClassName=\"thread-error\"\r\n          errorMessage={error || deleteError}\r\n          loading={isLoading || isDeleting}\r\n          loadingMessage={loadingMessage}\r\n          nothing={!name}\r\n          nothingMessage={'Thread does not exist'}\r\n          type=\"default\"\r\n        />\r\n      );\r\n    }\r\n\r\n    const threadPost = (\r\n      <Post\r\n        id={id}\r\n        threadID={id}\r\n        isThread={true}\r\n        content={content}\r\n        createdAt={createdAt}\r\n        creator={creator}\r\n        authenticatedUsername={authenticatedUsername}\r\n        authenticatedIsStaff={authenticatedIsStaff}\r\n        deleteAction={deleteThread}\r\n      />\r\n    );\r\n\r\n    const postsList =\r\n      posts.length === 0\r\n        ? null\r\n        : posts.map(post => {\r\n            const {\r\n              id: postID,\r\n              content: postContent,\r\n              created_at: postCreatedAt,\r\n              creator: postCreator,\r\n            } = post;\r\n\r\n            return (\r\n              <Post\r\n                key={postID}\r\n                threadID={id}\r\n                id={postID}\r\n                isThread={false}\r\n                content={postContent}\r\n                createdAt={postCreatedAt}\r\n                creator={postCreator}\r\n                authenticatedUsername={authenticatedUsername}\r\n                authenticatedIsStaff={authenticatedIsStaff}\r\n                deletePostList={deletePostList}\r\n                deleteAction={deletePost}\r\n              />\r\n            );\r\n          });\r\n\r\n    return (\r\n      <div className=\"threadContainer\">\r\n        <div className=\"thread-title\">\r\n          <Icon name={pinned ? 'pin' : 'talk outline'} />\r\n          {name}\r\n        </div>\r\n        <Segment.Group className=\"thread-list\">\r\n          {threadPost}\r\n          {postsList}\r\n        </Segment.Group>\r\n        <NewPost\r\n          isAuthenticated={isAuthenticated}\r\n          threadID={id}\r\n          createPost={createPost}\r\n          success={newPostSuccess}\r\n          isLoading={newPostLoading}\r\n          error={newPostError}\r\n          maxLength={2000}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/khanhpn/Project/freelancer/rengorum/frontend/src/containers/thread/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createPost as _createPost, fetchThread as _fetchThread, deletePost as _deletePost, deleteThread as _deleteThread } from '../../actions';\nimport Thread from '../../components/thread';\n\nvar ThreadContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ThreadContainer, _Component);\n\n  function ThreadContainer() {\n    _classCallCheck(this, ThreadContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ThreadContainer).apply(this, arguments));\n  }\n\n  _createClass(ThreadContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var thread = this.props.match.params.thread;\n      this.props.fetchThread(thread);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      var thread = this.props.match.params.thread;\n      var newThread = newProps.match.params.thread;\n\n      if (thread !== newThread) {\n        this.props.fetchThread(newThread);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var threadID = this.props.match.params.thread;\n      var _this$props = this.props,\n          isLoading = _this$props.isLoading,\n          name = _this$props.name,\n          content = _this$props.content,\n          pinned = _this$props.pinned,\n          creator = _this$props.creator,\n          createdAt = _this$props.createdAt,\n          posts = _this$props.posts,\n          error = _this$props.error,\n          isAuthenticated = _this$props.isAuthenticated,\n          createPost = _this$props.createPost,\n          newPostLoading = _this$props.newPostLoading,\n          newPostError = _this$props.newPostError,\n          newPostSuccess = _this$props.newPostSuccess,\n          authenticatedUsername = _this$props.authenticatedUsername,\n          authenticatedIsStaff = _this$props.authenticatedIsStaff,\n          deletePostList = _this$props.deletePostList,\n          deletePost = _this$props.deletePost,\n          isDeleting = _this$props.isDeleting,\n          deleteError = _this$props.deleteError,\n          deleteThread = _this$props.deleteThread;\n      return React.createElement(Thread, {\n        id: threadID,\n        isLoading: isLoading,\n        name: name,\n        content: content,\n        pinned: pinned,\n        creator: creator,\n        createdAt: createdAt,\n        posts: posts,\n        error: error,\n        isAuthenticated: isAuthenticated,\n        createPost: createPost,\n        newPostSuccess: newPostSuccess,\n        newPostLoading: newPostLoading,\n        newPostError: newPostError,\n        authenticatedUsername: authenticatedUsername,\n        authenticatedIsStaff: authenticatedIsStaff,\n        deletePostList: deletePostList,\n        deletePost: deletePost,\n        isDeleting: isDeleting,\n        deleteError: deleteError,\n        deleteThread: deleteThread,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ThreadContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isLoading: state.thread.isLoading,\n    name: state.thread.name,\n    content: state.thread.content,\n    pinned: state.thread.pinned,\n    creator: state.thread.creator,\n    createdAt: state.thread.createdAt,\n    posts: state.thread.posts,\n    error: state.thread.error,\n    isAuthenticated: state.auth.isAuthenticated,\n    authenticatedUsername: state.auth.username,\n    authenticatedIsStaff: state.auth.isStaff,\n    newPostSuccess: state.thread.newPostSuccess,\n    newPostLoading: state.thread.newPostLoading,\n    newPostError: state.thread.newPostError,\n    deletePostList: state.thread.deletePostList,\n    isDeleting: state.thread.isDeleting,\n    deleteError: state.thread.deleteError\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchThread: function fetchThread(thread) {\n      dispatch(_fetchThread(thread));\n    },\n    createPost: function createPost(newPost) {\n      dispatch(_createPost(newPost));\n    },\n    deletePost: function deletePost(id, threadID) {\n      dispatch(_deletePost(id, threadID));\n    },\n    deleteThread: function deleteThread(id) {\n      dispatch(_deleteThread(id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ThreadContainer);","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/containers/thread/index.js"],"names":["React","Component","connect","createPost","fetchThread","deletePost","deleteThread","Thread","ThreadContainer","thread","props","match","params","newProps","newThread","threadID","isLoading","name","content","pinned","creator","createdAt","posts","error","isAuthenticated","newPostLoading","newPostError","newPostSuccess","authenticatedUsername","authenticatedIsStaff","deletePostList","isDeleting","deleteError","mapStateToProps","state","auth","username","isStaff","mapDispatchToProps","dispatch","newPost","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {createPost, fetchThread, deletePost, deleteThread} from '../../actions';\r\nimport Thread from '../../components/thread';\r\n\r\nclass ThreadContainer extends Component {\r\n  componentDidMount() {\r\n    const {thread} = this.props.match.params;\r\n    this.props.fetchThread(thread);\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    const {thread} = this.props.match.params;\r\n    const {thread: newThread} = newProps.match.params;\r\n    if (thread !== newThread) {\r\n      this.props.fetchThread(newThread);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {thread: threadID} = this.props.match.params;\r\n    const {\r\n      isLoading,\r\n      name,\r\n      content,\r\n      pinned,\r\n      creator,\r\n      createdAt,\r\n      posts,\r\n      error,\r\n      isAuthenticated,\r\n      createPost,\r\n      newPostLoading,\r\n      newPostError,\r\n      newPostSuccess,\r\n      authenticatedUsername,\r\n      authenticatedIsStaff,\r\n      deletePostList,\r\n      deletePost,\r\n      isDeleting,\r\n      deleteError,\r\n      deleteThread,\r\n    } = this.props;\r\n    return (\r\n      <Thread\r\n        id={threadID}\r\n        isLoading={isLoading}\r\n        name={name}\r\n        content={content}\r\n        pinned={pinned}\r\n        creator={creator}\r\n        createdAt={createdAt}\r\n        posts={posts}\r\n        error={error}\r\n        isAuthenticated={isAuthenticated}\r\n        createPost={createPost}\r\n        newPostSuccess={newPostSuccess}\r\n        newPostLoading={newPostLoading}\r\n        newPostError={newPostError}\r\n        authenticatedUsername={authenticatedUsername}\r\n        authenticatedIsStaff={authenticatedIsStaff}\r\n        deletePostList={deletePostList}\r\n        deletePost={deletePost}\r\n        isDeleting={isDeleting}\r\n        deleteError={deleteError}\r\n        deleteThread={deleteThread}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: state.thread.isLoading,\r\n  name: state.thread.name,\r\n  content: state.thread.content,\r\n  pinned: state.thread.pinned,\r\n  creator: state.thread.creator,\r\n  createdAt: state.thread.createdAt,\r\n  posts: state.thread.posts,\r\n  error: state.thread.error,\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  authenticatedUsername: state.auth.username,\r\n  authenticatedIsStaff: state.auth.isStaff,\r\n  newPostSuccess: state.thread.newPostSuccess,\r\n  newPostLoading: state.thread.newPostLoading,\r\n  newPostError: state.thread.newPostError,\r\n  deletePostList: state.thread.deletePostList,\r\n  isDeleting: state.thread.isDeleting,\r\n  deleteError: state.thread.deleteError,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchThread: thread => {\r\n    dispatch(fetchThread(thread));\r\n  },\r\n  createPost: newPost => {\r\n    dispatch(createPost(newPost));\r\n  },\r\n  deletePost: (id, threadID) => {\r\n    dispatch(deletePost(id, threadID));\r\n  },\r\n  deleteThread: id => {\r\n    dispatch(deleteThread(id));\r\n  },\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ThreadContainer);\r\n"]},"metadata":{},"sourceType":"module"}
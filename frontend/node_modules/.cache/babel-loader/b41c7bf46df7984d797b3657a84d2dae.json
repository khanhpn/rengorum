{"ast":null,"code":"import { REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_FAILURE, REGISTER_RESET } from './types';\nimport { registerApi } from '../api';\nimport { apiErrorHandler } from '../utils/errorhandler';\nimport { login } from './auth';\nexport var register = function register(data) {\n  return function (dispatch) {\n    dispatch(registerRequest());\n    registerApi(data).then(function (response) {\n      dispatch(registerSuccess());\n      dispatch(login(data.email, data.password));\n    }).catch(function (error) {\n      var errorMessage = apiErrorHandler(error);\n      dispatch(registerFailure(errorMessage));\n    });\n  };\n};\nexport var registerRequest = function registerRequest() {\n  return {\n    type: REGISTER_REQUEST\n  };\n};\nexport var registerSuccess = function registerSuccess() {\n  return {\n    type: REGISTER_SUCCESS\n  };\n};\nexport var registerFailure = function registerFailure(error) {\n  return {\n    type: REGISTER_FAILURE,\n    error: error\n  };\n};\nexport var registerReset = function registerReset() {\n  return {\n    type: REGISTER_RESET\n  };\n};","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/actions/register.js"],"names":["REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","REGISTER_RESET","registerApi","apiErrorHandler","login","register","data","dispatch","registerRequest","then","response","registerSuccess","email","password","catch","error","errorMessage","registerFailure","type","registerReset"],"mappings":"AAAA,SACEA,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,cAJF,QAKO,SALP;AAMA,SAAQC,WAAR,QAA0B,QAA1B;AACA,SAAQC,eAAR,QAA8B,uBAA9B;AACA,SAAQC,KAAR,QAAoB,QAApB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,IAAI;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAC1CA,IAAAA,QAAQ,CAACC,eAAe,EAAhB,CAAR;AAEAN,IAAAA,WAAW,CAACI,IAAD,CAAX,CACGG,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBH,MAAAA,QAAQ,CAACI,eAAe,EAAhB,CAAR;AACAJ,MAAAA,QAAQ,CAACH,KAAK,CAACE,IAAI,CAACM,KAAN,EAAaN,IAAI,CAACO,QAAlB,CAAN,CAAR;AACD,KAJH,EAKGC,KALH,CAKS,UAAAC,KAAK,EAAI;AACd,UAAMC,YAAY,GAAGb,eAAe,CAACY,KAAD,CAApC;AACAR,MAAAA,QAAQ,CAACU,eAAe,CAACD,YAAD,CAAhB,CAAR;AACD,KARH;AASD,GAZ2B;AAAA,CAArB;AAcP,OAAO,IAAMR,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO;AACLU,IAAAA,IAAI,EAAEpB;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO;AACLO,IAAAA,IAAI,EAAEnB;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMkB,eAAe,GAAG,SAAlBA,eAAkB,CAAAF,KAAK,EAAI;AACtC,SAAO;AACLG,IAAAA,IAAI,EAAElB,gBADD;AAELe,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO;AACLD,IAAAA,IAAI,EAAEjB;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\r\n  REGISTER_REQUEST,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAILURE,\r\n  REGISTER_RESET,\r\n} from './types';\r\nimport {registerApi} from '../api';\r\nimport {apiErrorHandler} from '../utils/errorhandler';\r\nimport {login} from './auth';\r\n\r\nexport const register = data => dispatch => {\r\n  dispatch(registerRequest());\r\n\r\n  registerApi(data)\r\n    .then(response => {\r\n      dispatch(registerSuccess());\r\n      dispatch(login(data.email, data.password));\r\n    })\r\n    .catch(error => {\r\n      const errorMessage = apiErrorHandler(error);\r\n      dispatch(registerFailure(errorMessage));\r\n    });\r\n};\r\n\r\nexport const registerRequest = () => {\r\n  return {\r\n    type: REGISTER_REQUEST,\r\n  };\r\n};\r\n\r\nexport const registerSuccess = () => {\r\n  return {\r\n    type: REGISTER_SUCCESS,\r\n  };\r\n};\r\n\r\nexport const registerFailure = error => {\r\n  return {\r\n    type: REGISTER_FAILURE,\r\n    error,\r\n  };\r\n};\r\n\r\nexport const registerReset = () => {\r\n  return {\r\n    type: REGISTER_RESET,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_THREAD_REQUEST, FETCH_THREAD_SUCCESS, FETCH_THREAD_FAILURE, CREATE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_THREAD_REQUEST, DELETE_THREAD_SUCCESS, DELETE_THREAD_FAILURE } from '../actions/types';\nvar threadInitialState = {\n  isLoading: false,\n  name: null,\n  content: null,\n  pinned: false,\n  creator: null,\n  createdt: null,\n  posts: [],\n  error: null\n};\nvar newPostInitialState = {\n  newPostSuccess: false,\n  newPostLoading: false,\n  newPostError: null\n};\nvar deletePostInitialState = {\n  deletePostList: []\n};\nvar deleteThreadInitialState = {\n  isDeleting: false,\n  deleteError: null\n};\n\nvar initialState = _objectSpread({}, threadInitialState, newPostInitialState, deletePostInitialState, deleteThreadInitialState);\n\nvar thread = function thread() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_THREAD_REQUEST:\n      return _objectSpread({}, initialState, {\n        isLoading: true,\n        error: null\n      });\n\n    case FETCH_THREAD_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        name: action.thread.name,\n        content: action.thread.content,\n        pinned: action.thread.pinned,\n        creator: action.thread.creator,\n        createdAt: action.thread.created_at,\n        posts: action.thread.posts,\n        error: null\n      });\n\n    case FETCH_THREAD_FAILURE:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.error\n      });\n\n    case DELETE_THREAD_REQUEST:\n      return _objectSpread({}, state, {\n        isDeleting: true,\n        deleteError: null\n      });\n\n    case DELETE_THREAD_SUCCESS:\n      return _objectSpread({}, state, {\n        isDeleting: false,\n        deleteError: null\n      });\n\n    case DELETE_THREAD_FAILURE:\n      return _objectSpread({}, state, {\n        isDeleting: false,\n        deleteError: action.error\n      });\n\n    case CREATE_POST_REQUEST:\n      return _objectSpread({}, state, {\n        newPostLoading: true,\n        newPostError: null,\n        newPostSuccess: false\n      });\n\n    case CREATE_POST_SUCCESS:\n      return _objectSpread({}, state, {\n        newPostLoading: false,\n        newPostError: null,\n        newPostSuccess: true\n      });\n\n    case CREATE_POST_FAILURE:\n      return _objectSpread({}, state, {\n        newPostLoading: false,\n        newPostError: action.error,\n        newPostSuccess: false\n      });\n\n    case DELETE_POST_REQUEST:\n      return _objectSpread({}, state, {\n        deletePostList: [].concat(_toConsumableArray(state.deletePostList), [action.id])\n      });\n\n    case DELETE_POST_SUCCESS:\n    case DELETE_POST_FAILURE:\n      return _objectSpread({}, state, {\n        deletePostList: state.deletePostList.filter(function (id) {\n          return id !== action.id;\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default thread;","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/reducers/thread.js"],"names":["FETCH_THREAD_REQUEST","FETCH_THREAD_SUCCESS","FETCH_THREAD_FAILURE","CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_THREAD_REQUEST","DELETE_THREAD_SUCCESS","DELETE_THREAD_FAILURE","threadInitialState","isLoading","name","content","pinned","creator","createdt","posts","error","newPostInitialState","newPostSuccess","newPostLoading","newPostError","deletePostInitialState","deletePostList","deleteThreadInitialState","isDeleting","deleteError","initialState","thread","state","action","type","createdAt","created_at","id","filter"],"mappings":"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","sourcesContent":["import {\r\n  FETCH_THREAD_REQUEST,\r\n  FETCH_THREAD_SUCCESS,\r\n  FETCH_THREAD_FAILURE,\r\n  CREATE_POST_REQUEST,\r\n  CREATE_POST_SUCCESS,\r\n  CREATE_POST_FAILURE,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  DELETE_POST_FAILURE,\r\n  DELETE_THREAD_REQUEST,\r\n  DELETE_THREAD_SUCCESS,\r\n  DELETE_THREAD_FAILURE,\r\n} from '../actions/types';\r\n\r\nconst threadInitialState = {\r\n  isLoading: false,\r\n  name: null,\r\n  content: null,\r\n  pinned: false,\r\n  creator: null,\r\n  createdt: null,\r\n  posts: [],\r\n  error: null,\r\n};\r\n\r\nconst newPostInitialState = {\r\n  newPostSuccess: false,\r\n  newPostLoading: false,\r\n  newPostError: null,\r\n};\r\n\r\nconst deletePostInitialState = {\r\n  deletePostList: [],\r\n};\r\n\r\nconst deleteThreadInitialState = {\r\n  isDeleting: false,\r\n  deleteError: null,\r\n};\r\n\r\nconst initialState = {\r\n  ...threadInitialState,\r\n  ...newPostInitialState,\r\n  ...deletePostInitialState,\r\n  ...deleteThreadInitialState,\r\n};\r\n\r\nconst thread = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_THREAD_REQUEST:\r\n      return {\r\n        ...initialState,\r\n        isLoading: true,\r\n        error: null,\r\n      };\r\n    case FETCH_THREAD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        name: action.thread.name,\r\n        content: action.thread.content,\r\n        pinned: action.thread.pinned,\r\n        creator: action.thread.creator,\r\n        createdAt: action.thread.created_at,\r\n        posts: action.thread.posts,\r\n        error: null,\r\n      };\r\n    case FETCH_THREAD_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    case DELETE_THREAD_REQUEST:\r\n      return {\r\n        ...state,\r\n        isDeleting: true,\r\n        deleteError: null,\r\n      };\r\n    case DELETE_THREAD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isDeleting: false,\r\n        deleteError: null,\r\n      };\r\n    case DELETE_THREAD_FAILURE:\r\n      return {\r\n        ...state,\r\n        isDeleting: false,\r\n        deleteError: action.error,\r\n      };\r\n    case CREATE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        newPostLoading: true,\r\n        newPostError: null,\r\n        newPostSuccess: false,\r\n      };\r\n    case CREATE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        newPostLoading: false,\r\n        newPostError: null,\r\n        newPostSuccess: true,\r\n      };\r\n    case CREATE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        newPostLoading: false,\r\n        newPostError: action.error,\r\n        newPostSuccess: false,\r\n      };\r\n    case DELETE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        deletePostList: [...state.deletePostList, action.id],\r\n      };\r\n    case DELETE_POST_SUCCESS:\r\n    case DELETE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        deletePostList: state.deletePostList.filter(id => id !== action.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default thread;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/khanhpn/Project/freelancer/rengorum/frontend/src/components/newthread/index.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getSelectedBlock } from 'draftjs-utils';\nimport htmlToDraft from 'html-to-draftjs';\nimport { List } from 'immutable';\nimport { EditorState, ContentState, convertFromRaw, convertToRaw, Modifier } from 'draft-js';\nimport { Form, Icon, Divider, Button } from 'semantic-ui-react';\nimport './styles.css';\nimport RichEditor from '../richeditor';\nimport StatusMessage from '../statusmessage';\n\nvar NewThread =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewThread, _Component);\n\n  function NewThread(props) {\n    var _this;\n\n    _classCallCheck(this, NewThread);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewThread).call(this, props));\n\n    _this.convertToEditorState = function (content) {\n      var editorState = EditorState.createEmpty();\n\n      if (content) {\n        try {\n          var contentState = convertFromRaw(JSON.parse(content));\n          editorState = EditorState.createWithContent(contentState);\n        } catch (error) {\n          var _contentState = ContentState.createFromText(content);\n\n          editorState = EditorState.createWithContent(_contentState);\n        }\n      }\n\n      return editorState;\n    };\n\n    _this.toggleShowEditor = function () {\n      _this.props.toggleShowEditor();\n    };\n\n    _this.onSave = function () {\n      // save to redux store (uncontrolled input way)\n      var _this$state = _this.state,\n          name = _this$state.name,\n          editorState = _this$state.editorState;\n      var content = JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n\n      _this.props.updateNewThread({\n        name: name,\n        content: content\n      });\n\n      _this.toggleShowEditor();\n    };\n\n    _this.onCancel = function () {\n      // reset & clear everything\n      var editorState = EditorState.createEmpty();\n\n      _this.setState({\n        name: '',\n        editorState: editorState\n      });\n\n      var content = JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n\n      _this.props.updateNewThread({\n        name: '',\n        content: content\n      });\n\n      _this.toggleShowEditor();\n    };\n\n    _this.onNameChange = function (e, _ref) {\n      var value = _ref.value;\n\n      _this.setState({\n        name: value\n      });\n    };\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState\n      });\n    };\n\n    _this.isFormValid = function () {\n      var name = _this.state.name;\n      return name;\n    };\n\n    _this.onSubmit = function () {\n      if (_this.isFormValid()) {\n        var _this$state2 = _this.state,\n            name = _this$state2.name,\n            editorState = _this$state2.editorState;\n        var _this$props = _this.props,\n            forum = _this$props.forum,\n            createThread = _this$props.createThread;\n        var content = JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n        var newThread = {\n          name: name,\n          forum: forum,\n          content: content\n        };\n        createThread(newThread);\n      }\n    };\n\n    _this.isValidLength = function (contentState) {\n      var maxLength = _this.props.maxLength || 100;\n      return contentState.getPlainText('').length <= maxLength;\n    };\n\n    _this.handleBeforeInput = function (input) {\n      var editorState = _this.state.editorState;\n\n      if (!_this.isValidLength(editorState.getCurrentContent())) {\n        return 'handled';\n      }\n    };\n\n    _this.handlePastedText = function (text, html, editorState, onChange) {\n      if (html) {\n        var contentBlock = htmlToDraft(html);\n        var contentState = editorState.getCurrentContent();\n        contentBlock.entityMap.forEach(function (value, key) {\n          contentState = contentState.mergeEntityData(key, value);\n        });\n        contentState = Modifier.replaceWithFragment(contentState, editorState.getSelection(), new List(contentBlock.contentBlocks));\n\n        if (!_this.isValidLength(contentState)) {\n          return 'handled';\n        }\n\n        onChange(EditorState.push(editorState, contentState, 'insert-characters'));\n        return true;\n      }\n\n      var selectedBlock = getSelectedBlock(editorState);\n      var newState = Modifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, editorState.getCurrentInlineStyle());\n\n      if (!_this.isValidLength(newState)) {\n        return 'handled';\n      }\n\n      onChange(EditorState.push(editorState, newState, 'insert-characters'));\n\n      if (selectedBlock && selectedBlock.type === 'code') {\n        return true;\n      }\n\n      return false;\n    };\n\n    var _this$props2 = _this.props,\n        _name = _this$props2.name,\n        _content = _this$props2.content;\n\n    var _editorState = _this.convertToEditorState(_content);\n\n    _this.state = {\n      name: _name,\n      editorState: _editorState\n    };\n    return _this;\n  }\n\n  _createClass(NewThread, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      var newName = newProps.name,\n          newContent = newProps.content;\n      var editorState = this.convertToEditorState(newContent);\n      this.setState({\n        name: newName,\n        editorState: editorState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          isAuthenticated = _this$props3.isAuthenticated,\n          isLoading = _this$props3.isLoading,\n          success = _this$props3.success,\n          id = _this$props3.id,\n          error = _this$props3.error,\n          showEditor = _this$props3.showEditor;\n      var _this$state3 = this.state,\n          name = _this$state3.name,\n          editorState = _this$state3.editorState;\n\n      if (!isAuthenticated) {\n        return React.createElement(\"div\", {\n          className: \"newThread-none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        });\n      }\n\n      var statusMessage = React.createElement(StatusMessage, {\n        error: error,\n        errorClassName: \"newThread-message\",\n        errorMessage: error || 'Oops! Something went wrong.',\n        success: success,\n        successClassName: \"newThread-message\",\n        successMessage: React.createElement(Link, {\n          to: \"/thread/\".concat(id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, 'Successful on creating thread'),\n        type: \"modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      });\n\n      if (!showEditor) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, statusMessage, \" \", React.createElement(\"div\", {\n          className: \"newThread-hidden\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }, React.createElement(Button, {\n          size: \"small\",\n          color: \"blue\",\n          floated: \"left\",\n          onClick: this.toggleShowEditor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          name: \"edit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }), \"New Thread\")));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"newThread-show\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, statusMessage, React.createElement(Form, {\n        loading: isLoading,\n        className: \"attached fluid segment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Form.Input, {\n        required: true,\n        fluid: true,\n        transparent: true,\n        icon: \"edit\",\n        iconPosition: \"left\",\n        size: \"big\",\n        placeholder: \"Name\",\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        onChange: this.onNameChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(RichEditor, {\n        placeholder: \"Start typing your thread content here...\",\n        editorState: editorState,\n        wrapperClassName: \"newThread-wrapper\",\n        toolbarClassName: \"newThread-toolbar\",\n        editorClassName: \"newThread-editor\",\n        onEditorStateChange: this.onEditorStateChange,\n        handleBeforeInput: this.handleBeforeInput,\n        handlePastedText: this.handlePastedText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"blue\",\n        size: \"small\",\n        loading: isLoading,\n        disabled: isLoading,\n        onClick: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"edit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }), \"Post thread\"), React.createElement(Button, {\n        color: \"red\",\n        role: \"none\",\n        size: \"small\",\n        disabled: isLoading,\n        onClick: this.onSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"save\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }), \"Save Draft\"), React.createElement(Button, {\n        role: \"none\",\n        size: \"small\",\n        disabled: isLoading,\n        onClick: this.onCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"cancel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }), \"Clear\")));\n    }\n  }]);\n\n  return NewThread;\n}(Component);\n\nexport { NewThread as default };","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/components/newthread/index.js"],"names":["React","Component","Link","getSelectedBlock","htmlToDraft","List","EditorState","ContentState","convertFromRaw","convertToRaw","Modifier","Form","Icon","Divider","Button","RichEditor","StatusMessage","NewThread","props","convertToEditorState","content","editorState","createEmpty","contentState","JSON","parse","createWithContent","error","createFromText","toggleShowEditor","onSave","state","name","stringify","getCurrentContent","updateNewThread","onCancel","setState","onNameChange","e","value","onEditorStateChange","isFormValid","onSubmit","forum","createThread","newThread","isValidLength","maxLength","getPlainText","length","handleBeforeInput","input","handlePastedText","text","html","onChange","contentBlock","entityMap","forEach","key","mergeEntityData","replaceWithFragment","getSelection","contentBlocks","push","selectedBlock","newState","replaceText","getCurrentInlineStyle","type","newProps","newName","newContent","isAuthenticated","isLoading","success","id","showEditor","statusMessage"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {getSelectedBlock} from 'draftjs-utils';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport {List} from 'immutable';\r\nimport {\r\n  EditorState,\r\n  ContentState,\r\n  convertFromRaw,\r\n  convertToRaw,\r\n  Modifier,\r\n} from 'draft-js';\r\nimport {Form, Icon, Divider, Button} from 'semantic-ui-react';\r\nimport './styles.css';\r\nimport RichEditor from '../richeditor';\r\nimport StatusMessage from '../statusmessage';\r\n\r\nexport default class NewThread extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {name, content} = this.props;\r\n    let editorState = this.convertToEditorState(content);\r\n    this.state = {\r\n      name,\r\n      editorState,\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    const {name: newName, content: newContent} = newProps;\r\n    const editorState = this.convertToEditorState(newContent);\r\n    this.setState({\r\n      name: newName,\r\n      editorState,\r\n    });\r\n  }\r\n\r\n  convertToEditorState = content => {\r\n    let editorState = EditorState.createEmpty();\r\n    if (content) {\r\n      try {\r\n        const contentState = convertFromRaw(JSON.parse(content));\r\n        editorState = EditorState.createWithContent(contentState);\r\n      } catch (error) {\r\n        const contentState = ContentState.createFromText(content);\r\n        editorState = EditorState.createWithContent(contentState);\r\n      }\r\n    }\r\n    return editorState;\r\n  };\r\n\r\n  toggleShowEditor = () => {\r\n    this.props.toggleShowEditor();\r\n  };\r\n\r\n  onSave = () => {\r\n    // save to redux store (uncontrolled input way)\r\n    const {name, editorState} = this.state;\r\n    const content = JSON.stringify(\r\n      convertToRaw(editorState.getCurrentContent()),\r\n    );\r\n    this.props.updateNewThread({\r\n      name: name,\r\n      content: content,\r\n    });\r\n    this.toggleShowEditor();\r\n  };\r\n\r\n  onCancel = () => {\r\n    // reset & clear everything\r\n    const editorState = EditorState.createEmpty();\r\n    this.setState({\r\n      name: '',\r\n      editorState,\r\n    });\r\n    const content = JSON.stringify(\r\n      convertToRaw(editorState.getCurrentContent()),\r\n    );\r\n    this.props.updateNewThread({\r\n      name: '',\r\n      content: content,\r\n    });\r\n    this.toggleShowEditor();\r\n  };\r\n\r\n  onNameChange = (e, {value}) => {\r\n    this.setState({\r\n      name: value,\r\n    });\r\n  };\r\n\r\n  onEditorStateChange = editorState => {\r\n    this.setState({\r\n      editorState,\r\n    });\r\n  };\r\n\r\n  isFormValid = () => {\r\n    const {name} = this.state;\r\n    return name;\r\n  };\r\n\r\n  onSubmit = () => {\r\n    if (this.isFormValid()) {\r\n      const {name, editorState} = this.state;\r\n      const {forum, createThread} = this.props;\r\n      const content = JSON.stringify(\r\n        convertToRaw(editorState.getCurrentContent()),\r\n      );\r\n      let newThread = {\r\n        name: name,\r\n        forum: forum,\r\n        content: content,\r\n      };\r\n      createThread(newThread);\r\n    }\r\n  };\r\n\r\n  isValidLength = contentState => {\r\n    const maxLength = this.props.maxLength || 100;\r\n    return contentState.getPlainText('').length <= maxLength;\r\n  };\r\n\r\n  handleBeforeInput = input => {\r\n    const {editorState} = this.state;\r\n    if (!this.isValidLength(editorState.getCurrentContent())) {\r\n      return 'handled';\r\n    }\r\n  };\r\n\r\n  handlePastedText = (text, html, editorState, onChange) => {\r\n    if (html) {\r\n      const contentBlock = htmlToDraft(html);\r\n      let contentState = editorState.getCurrentContent();\r\n      contentBlock.entityMap.forEach((value, key) => {\r\n        contentState = contentState.mergeEntityData(key, value);\r\n      });\r\n      contentState = Modifier.replaceWithFragment(\r\n        contentState,\r\n        editorState.getSelection(),\r\n        new List(contentBlock.contentBlocks),\r\n      );\r\n      if (!this.isValidLength(contentState)) {\r\n        return 'handled';\r\n      }\r\n      onChange(\r\n        EditorState.push(editorState, contentState, 'insert-characters'),\r\n      );\r\n      return true;\r\n    }\r\n    const selectedBlock = getSelectedBlock(editorState);\r\n    const newState = Modifier.replaceText(\r\n      editorState.getCurrentContent(),\r\n      editorState.getSelection(),\r\n      text,\r\n      editorState.getCurrentInlineStyle(),\r\n    );\r\n    if (!this.isValidLength(newState)) {\r\n      return 'handled';\r\n    }\r\n    onChange(EditorState.push(editorState, newState, 'insert-characters'));\r\n    if (selectedBlock && selectedBlock.type === 'code') {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isAuthenticated,\r\n      isLoading,\r\n      success,\r\n      id,\r\n      error,\r\n      showEditor,\r\n    } = this.props;\r\n    const {name, editorState} = this.state;\r\n    if (!isAuthenticated) {\r\n      return <div className=\"newThread-none\" />;\r\n    }\r\n\r\n    const statusMessage = (\r\n      <StatusMessage\r\n        error={error}\r\n        errorClassName=\"newThread-message\"\r\n        errorMessage={error || 'Oops! Something went wrong.'}\r\n        success={success}\r\n        successClassName=\"newThread-message\"\r\n        successMessage={\r\n          <Link to={`/thread/${id}`}>{'Successful on creating thread'}</Link>\r\n        }\r\n        type=\"modal\"\r\n      />\r\n    );\r\n\r\n    if (!showEditor) {\r\n      return (\r\n        <div>\r\n          {statusMessage} {/*this will only show the success message*/}\r\n          <div className=\"newThread-hidden\">\r\n            <Button\r\n              size=\"small\"\r\n              color=\"blue\"\r\n              floated=\"left\"\r\n              onClick={this.toggleShowEditor}>\r\n              <Icon name=\"edit\" />\r\n              New Thread\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"newThread-show\">\r\n        {statusMessage}\r\n        <Form loading={isLoading} className=\"attached fluid segment\">\r\n          <Form.Input\r\n            required\r\n            fluid\r\n            transparent\r\n            icon=\"edit\"\r\n            iconPosition=\"left\"\r\n            size=\"big\"\r\n            placeholder=\"Name\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.onNameChange}\r\n          />\r\n          <Divider />\r\n          <RichEditor\r\n            placeholder=\"Start typing your thread content here...\"\r\n            editorState={editorState}\r\n            wrapperClassName=\"newThread-wrapper\"\r\n            toolbarClassName=\"newThread-toolbar\"\r\n            editorClassName=\"newThread-editor\"\r\n            onEditorStateChange={this.onEditorStateChange}\r\n            handleBeforeInput={this.handleBeforeInput}\r\n            handlePastedText={this.handlePastedText}\r\n          />\r\n          <Button\r\n            color=\"blue\"\r\n            size=\"small\"\r\n            loading={isLoading}\r\n            disabled={isLoading}\r\n            onClick={this.onSubmit}>\r\n            <Icon name=\"edit\" />\r\n            Post thread\r\n          </Button>\r\n          <Button\r\n            color=\"red\"\r\n            role=\"none\"\r\n            size=\"small\"\r\n            disabled={isLoading}\r\n            onClick={this.onSave}>\r\n            <Icon name=\"save\" />\r\n            Save Draft\r\n          </Button>\r\n          <Button\r\n            role=\"none\"\r\n            size=\"small\"\r\n            disabled={isLoading}\r\n            onClick={this.onCancel}>\r\n            <Icon name=\"cancel\" />\r\n            Clear\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/khanhpn/Project/freelancer/rengorum/frontend/src/components/newpost/index.js\";\nimport React, { Component } from 'react';\nimport { getSelectedBlock } from 'draftjs-utils';\nimport htmlToDraft from 'html-to-draftjs';\nimport { List } from 'immutable';\nimport { EditorState, convertToRaw, Modifier } from 'draft-js';\nimport { Form, Icon, Button } from 'semantic-ui-react';\nimport './styles.css';\nimport RichEditor from '../richeditor';\nimport StatusMessage from '../statusmessage';\n\nvar NewPost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPost, _Component);\n\n  function NewPost(props) {\n    var _this;\n\n    _classCallCheck(this, NewPost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewPost).call(this, props));\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState\n      });\n    };\n\n    _this.onSubmit = function () {\n      var editorState = _this.state.editorState;\n      var _this$props = _this.props,\n          threadID = _this$props.threadID,\n          createPost = _this$props.createPost;\n      var content = JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n      var newPost = {\n        thread_id: threadID,\n        content: content\n      };\n      createPost(newPost);\n    };\n\n    _this.isValidLength = function (contentState) {\n      var maxLength = _this.props.maxLength || 1000;\n      return contentState.getPlainText('').length <= maxLength;\n    };\n\n    _this.handleBeforeInput = function (input) {\n      var editorState = _this.state.editorState;\n\n      if (!_this.isValidLength(editorState.getCurrentContent())) {\n        return 'handled';\n      }\n    };\n\n    _this.handlePastedText = function (text, html, editorState, onChange) {\n      if (html) {\n        var contentBlock = htmlToDraft(html);\n        var contentState = editorState.getCurrentContent();\n        contentBlock.entityMap.forEach(function (value, key) {\n          contentState = contentState.mergeEntityData(key, value);\n        });\n        contentState = Modifier.replaceWithFragment(contentState, editorState.getSelection(), new List(contentBlock.contentBlocks));\n\n        if (!_this.isValidLength(contentState)) {\n          return 'handled';\n        }\n\n        onChange(EditorState.push(editorState, contentState, 'insert-characters'));\n        return true;\n      }\n\n      var selectedBlock = getSelectedBlock(editorState);\n      var newState = Modifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, editorState.getCurrentInlineStyle());\n\n      if (!_this.isValidLength(newState)) {\n        return 'handled';\n      }\n\n      onChange(EditorState.push(editorState, newState, 'insert-characters'));\n\n      if (selectedBlock && selectedBlock.type === 'code') {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.state = {\n      editorState: EditorState.createEmpty()\n    };\n    return _this;\n  }\n\n  _createClass(NewPost, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      var success = newProps.success;\n\n      if (success) {\n        this.setState({\n          editorState: EditorState.createEmpty()\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isAuthenticated = _this$props2.isAuthenticated,\n          isLoading = _this$props2.isLoading,\n          error = _this$props2.error;\n\n      if (!isAuthenticated) {\n        return React.createElement(\"div\", {\n          className: \"newPost-none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, 'Please sign in to post a reply');\n      }\n\n      var editorState = this.state.editorState;\n      var statusMessage = React.createElement(StatusMessage, {\n        error: error,\n        errorClassName: \"newPost-message\",\n        errorMessage: error || 'Oops! Something went wrong.',\n        type: \"modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        className: \"newPost-show\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, statusMessage, React.createElement(Form, {\n        loading: isLoading,\n        className: \"attached fluid segment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(RichEditor, {\n        placeholder: \"Start typing your post content here...\",\n        editorState: editorState,\n        wrapperClassName: \"newPost-wrapper\",\n        toolbarClassName: \"newPost-toolbar\",\n        editorClassName: \"newPost-editor\",\n        onEditorStateChange: this.onEditorStateChange,\n        handleBeforeInput: this.handleBeforeInput,\n        handlePastedText: this.handlePastedText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"blue\",\n        size: \"small\",\n        loading: isLoading,\n        disabled: isLoading,\n        onClick: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"write\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), \"Post\")));\n    }\n  }]);\n\n  return NewPost;\n}(Component);\n\nexport { NewPost as default };","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/components/newpost/index.js"],"names":["React","Component","getSelectedBlock","htmlToDraft","List","EditorState","convertToRaw","Modifier","Form","Icon","Button","RichEditor","StatusMessage","NewPost","props","onEditorStateChange","editorState","setState","onSubmit","state","threadID","createPost","content","JSON","stringify","getCurrentContent","newPost","thread_id","isValidLength","contentState","maxLength","getPlainText","length","handleBeforeInput","input","handlePastedText","text","html","onChange","contentBlock","entityMap","forEach","value","key","mergeEntityData","replaceWithFragment","getSelection","contentBlocks","push","selectedBlock","newState","replaceText","getCurrentInlineStyle","type","createEmpty","newProps","success","isAuthenticated","isLoading","error","statusMessage"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {getSelectedBlock} from 'draftjs-utils';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport {List} from 'immutable';\r\nimport {EditorState, convertToRaw, Modifier} from 'draft-js';\r\nimport {Form, Icon, Button} from 'semantic-ui-react';\r\nimport './styles.css';\r\nimport RichEditor from '../richeditor';\r\nimport StatusMessage from '../statusmessage';\r\n\r\nexport default class NewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editorState: EditorState.createEmpty(),\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    const {success} = newProps;\r\n    if (success) {\r\n      this.setState({\r\n        editorState: EditorState.createEmpty(),\r\n      });\r\n    }\r\n  }\r\n\r\n  onEditorStateChange = editorState => {\r\n    this.setState({\r\n      editorState,\r\n    });\r\n  };\r\n\r\n  onSubmit = () => {\r\n    const {editorState} = this.state;\r\n    const {threadID, createPost} = this.props;\r\n    const content = JSON.stringify(\r\n      convertToRaw(editorState.getCurrentContent()),\r\n    );\r\n    let newPost = {\r\n      thread_id: threadID,\r\n      content: content,\r\n    };\r\n    createPost(newPost);\r\n  };\r\n\r\n  isValidLength = contentState => {\r\n    const maxLength = this.props.maxLength || 1000;\r\n    return contentState.getPlainText('').length <= maxLength;\r\n  };\r\n\r\n  handleBeforeInput = input => {\r\n    const {editorState} = this.state;\r\n    if (!this.isValidLength(editorState.getCurrentContent())) {\r\n      return 'handled';\r\n    }\r\n  };\r\n\r\n  handlePastedText = (text, html, editorState, onChange) => {\r\n    if (html) {\r\n      const contentBlock = htmlToDraft(html);\r\n      let contentState = editorState.getCurrentContent();\r\n      contentBlock.entityMap.forEach((value, key) => {\r\n        contentState = contentState.mergeEntityData(key, value);\r\n      });\r\n      contentState = Modifier.replaceWithFragment(\r\n        contentState,\r\n        editorState.getSelection(),\r\n        new List(contentBlock.contentBlocks),\r\n      );\r\n      if (!this.isValidLength(contentState)) {\r\n        return 'handled';\r\n      }\r\n      onChange(\r\n        EditorState.push(editorState, contentState, 'insert-characters'),\r\n      );\r\n      return true;\r\n    }\r\n    const selectedBlock = getSelectedBlock(editorState);\r\n    const newState = Modifier.replaceText(\r\n      editorState.getCurrentContent(),\r\n      editorState.getSelection(),\r\n      text,\r\n      editorState.getCurrentInlineStyle(),\r\n    );\r\n    if (!this.isValidLength(newState)) {\r\n      return 'handled';\r\n    }\r\n    onChange(EditorState.push(editorState, newState, 'insert-characters'));\r\n    if (selectedBlock && selectedBlock.type === 'code') {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  render() {\r\n    const {isAuthenticated, isLoading, error} = this.props;\r\n    if (!isAuthenticated) {\r\n      return (\r\n        <div className=\"newPost-none\">{'Please sign in to post a reply'}</div>\r\n      );\r\n    }\r\n    const {editorState} = this.state;\r\n    const statusMessage = (\r\n      <StatusMessage\r\n        error={error}\r\n        errorClassName=\"newPost-message\"\r\n        errorMessage={error || 'Oops! Something went wrong.'}\r\n        type=\"modal\"\r\n      />\r\n    );\r\n\r\n    return (\r\n      <div className=\"newPost-show\">\r\n        {statusMessage}\r\n        <Form loading={isLoading} className=\"attached fluid segment\">\r\n          <RichEditor\r\n            placeholder=\"Start typing your post content here...\"\r\n            editorState={editorState}\r\n            wrapperClassName=\"newPost-wrapper\"\r\n            toolbarClassName=\"newPost-toolbar\"\r\n            editorClassName=\"newPost-editor\"\r\n            onEditorStateChange={this.onEditorStateChange}\r\n            handleBeforeInput={this.handleBeforeInput}\r\n            handlePastedText={this.handlePastedText}\r\n          />\r\n          <Button\r\n            color=\"blue\"\r\n            size=\"small\"\r\n            loading={isLoading}\r\n            disabled={isLoading}\r\n            onClick={this.onSubmit}>\r\n            <Icon name=\"write\" />\r\n            Post\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
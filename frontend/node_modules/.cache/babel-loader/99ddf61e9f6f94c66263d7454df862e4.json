{"ast":null,"code":"import _classCallCheck from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/khanhpn/Project/freelancer/rengorum/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/khanhpn/Project/freelancer/rengorum/frontend/src/containers/forum/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createThreadSave as _createThreadSave, createThreadToggle as _createThreadToggle, fetchForum as _fetchForum, createThread as _createThread } from '../../actions';\nimport ThreadList from '../../components/threadlist';\nimport NewThread from '../../components/newthread';\n\nvar ForumContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ForumContainer, _Component);\n\n  function ForumContainer() {\n    _classCallCheck(this, ForumContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ForumContainer).apply(this, arguments));\n  }\n\n  _createClass(ForumContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var forum = this.props.match.params.forum;\n      this.props.fetchForum(forum);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      var oldForum = this.props.match.params.forum;\n      var futureForum = newProps.match.params.forum;\n\n      if (oldForum !== futureForum) {\n        this.props.fetchForum(futureForum);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isLoading = _this$props.isLoading,\n          name = _this$props.name,\n          slug = _this$props.slug,\n          description = _this$props.description,\n          threads = _this$props.threads,\n          error = _this$props.error,\n          isAuthenticated = _this$props.isAuthenticated,\n          newThreadLoading = _this$props.newThreadLoading,\n          newThreadSuccess = _this$props.newThreadSuccess,\n          newThreadName = _this$props.newThreadName,\n          newThreadContent = _this$props.newThreadContent,\n          newThreadId = _this$props.newThreadId,\n          newThreadError = _this$props.newThreadError,\n          newThreadShow = _this$props.newThreadShow,\n          createThread = _this$props.createThread,\n          createThreadSave = _this$props.createThreadSave,\n          createThreadToggle = _this$props.createThreadToggle;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(NewThread, {\n        forum: slug,\n        isAuthenticated: isAuthenticated,\n        isLoading: newThreadLoading,\n        success: newThreadSuccess,\n        name: newThreadName,\n        content: newThreadContent,\n        id: newThreadId,\n        error: newThreadError,\n        showEditor: newThreadShow,\n        createThread: createThread,\n        updateNewThread: createThreadSave,\n        toggleShowEditor: createThreadToggle,\n        maxLength: 2000,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(ThreadList, {\n        isLoading: isLoading,\n        name: name,\n        slug: slug,\n        description: description,\n        threads: threads,\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ForumContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isLoading: state.forum.isLoading,\n    name: state.forum.name,\n    slug: state.forum.slug,\n    description: state.forum.description,\n    threads: state.forum.threads,\n    error: state.forum.error,\n    isAuthenticated: state.auth.isAuthenticated,\n    newThreadLoading: state.forum.newThreadLoading,\n    newThreadSuccess: state.forum.newThreadSuccess,\n    newThreadName: state.forum.newThreadName,\n    newThreadContent: state.forum.newThreadContent,\n    newThreadId: state.forum.newThreadId,\n    newThreadError: state.forum.newThreadError,\n    newThreadShow: state.forum.newThreadShow\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchForum: function fetchForum(forum) {\n      dispatch(_fetchForum(forum));\n    },\n    createThread: function createThread(newThread) {\n      dispatch(_createThread(newThread));\n    },\n    createThreadSave: function createThreadSave(newThread) {\n      dispatch(_createThreadSave(newThread));\n    },\n    createThreadToggle: function createThreadToggle() {\n      dispatch(_createThreadToggle());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForumContainer);","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/containers/forum/index.js"],"names":["React","Component","connect","createThreadSave","createThreadToggle","fetchForum","createThread","ThreadList","NewThread","ForumContainer","forum","props","match","params","newProps","oldForum","futureForum","isLoading","name","slug","description","threads","error","isAuthenticated","newThreadLoading","newThreadSuccess","newThreadName","newThreadContent","newThreadId","newThreadError","newThreadShow","mapStateToProps","state","auth","mapDispatchToProps","dispatch","newThread"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n  createThreadSave,\r\n  createThreadToggle,\r\n  fetchForum,\r\n  createThread,\r\n} from '../../actions';\r\nimport ThreadList from '../../components/threadlist';\r\nimport NewThread from '../../components/newthread';\r\n\r\nclass ForumContainer extends Component {\r\n  componentDidMount() {\r\n    const {forum} = this.props.match.params;\r\n    this.props.fetchForum(forum);\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    const {forum: oldForum} = this.props.match.params;\r\n    const {forum: futureForum} = newProps.match.params;\r\n    if (oldForum !== futureForum) {\r\n      this.props.fetchForum(futureForum);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isLoading,\r\n      name,\r\n      slug,\r\n      description,\r\n      threads,\r\n      error,\r\n      isAuthenticated,\r\n      newThreadLoading,\r\n      newThreadSuccess,\r\n      newThreadName,\r\n      newThreadContent,\r\n      newThreadId,\r\n      newThreadError,\r\n      newThreadShow,\r\n      createThread,\r\n      createThreadSave,\r\n      createThreadToggle,\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <NewThread\r\n          forum={slug}\r\n          isAuthenticated={isAuthenticated}\r\n          isLoading={newThreadLoading}\r\n          success={newThreadSuccess}\r\n          name={newThreadName}\r\n          content={newThreadContent}\r\n          id={newThreadId}\r\n          error={newThreadError}\r\n          showEditor={newThreadShow}\r\n          createThread={createThread}\r\n          updateNewThread={createThreadSave}\r\n          toggleShowEditor={createThreadToggle}\r\n          maxLength={2000}\r\n        />\r\n        <ThreadList\r\n          isLoading={isLoading}\r\n          name={name}\r\n          slug={slug}\r\n          description={description}\r\n          threads={threads}\r\n          error={error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: state.forum.isLoading,\r\n  name: state.forum.name,\r\n  slug: state.forum.slug,\r\n  description: state.forum.description,\r\n  threads: state.forum.threads,\r\n  error: state.forum.error,\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  newThreadLoading: state.forum.newThreadLoading,\r\n  newThreadSuccess: state.forum.newThreadSuccess,\r\n  newThreadName: state.forum.newThreadName,\r\n  newThreadContent: state.forum.newThreadContent,\r\n  newThreadId: state.forum.newThreadId,\r\n  newThreadError: state.forum.newThreadError,\r\n  newThreadShow: state.forum.newThreadShow,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchForum: forum => {\r\n    dispatch(fetchForum(forum));\r\n  },\r\n  createThread: newThread => {\r\n    dispatch(createThread(newThread));\r\n  },\r\n  createThreadSave: newThread => {\r\n    dispatch(createThreadSave(newThread));\r\n  },\r\n  createThreadToggle: () => {\r\n    dispatch(createThreadToggle());\r\n  },\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ForumContainer);\r\n"]},"metadata":{},"sourceType":"module"}
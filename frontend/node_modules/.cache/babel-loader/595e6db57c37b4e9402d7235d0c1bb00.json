{"ast":null,"code":"import { FETCH_THREAD_REQUEST, FETCH_THREAD_SUCCESS, FETCH_THREAD_FAILURE, CREATE_THREAD_REQUEST, CREATE_THREAD_SUCCESS, CREATE_THREAD_FAILURE, CREATE_THREAD_SAVE, CREATE_THREAD_TOGGLE, DELETE_THREAD_REQUEST, DELETE_THREAD_SUCCESS, DELETE_THREAD_FAILURE } from './types';\nimport { fetchThreadApi, createThreadApi, fetchForumApi, deleteThreadApi } from '../api';\nimport { fetchForumSuccess, fetchForumFailure } from './forum';\nimport { apiErrorHandler } from '../utils/errorhandler';\nexport var fetchThread = function fetchThread(thread) {\n  return function (dispatch) {\n    dispatch(fetchThreadRequest());\n    fetchThreadApi(thread).then(function (response) {\n      dispatch(fetchThreadSuccess(response.data));\n    }).catch(function (error) {\n      var errorMessage = apiErrorHandler(error);\n      dispatch(fetchThreadFailure(errorMessage));\n    });\n  };\n};\nexport var fetchThreadRequest = function fetchThreadRequest() {\n  return {\n    type: FETCH_THREAD_REQUEST\n  };\n};\nexport var fetchThreadSuccess = function fetchThreadSuccess(thread) {\n  return {\n    type: FETCH_THREAD_SUCCESS,\n    thread: thread\n  };\n};\nexport var fetchThreadFailure = function fetchThreadFailure(error) {\n  return {\n    type: FETCH_THREAD_FAILURE,\n    error: error\n  };\n};\nexport var createThread = function createThread(newThread) {\n  return function (dispatch) {\n    dispatch(createThreadRequest(newThread));\n    createThreadApi(newThread).then(function (response) {\n      dispatch(createThreadSuccess(response.data)); // re-load forum page\n\n      fetchForumApi(newThread.forum).then(function (response) {\n        dispatch(fetchForumSuccess(response.data));\n      }).catch(function (error) {\n        var errorMessage = apiErrorHandler(error);\n        dispatch(fetchForumFailure(errorMessage));\n      });\n    }).catch(function (error) {\n      var errorMessage = apiErrorHandler(error);\n      dispatch(createThreadFailure(errorMessage));\n    });\n  };\n};\nexport var createThreadRequest = function createThreadRequest(newThread) {\n  return {\n    type: CREATE_THREAD_REQUEST,\n    newThread: newThread\n  };\n};\nexport var createThreadSuccess = function createThreadSuccess(newThread) {\n  return {\n    type: CREATE_THREAD_SUCCESS,\n    newThread: newThread\n  };\n};\nexport var createThreadFailure = function createThreadFailure(error) {\n  return {\n    type: CREATE_THREAD_FAILURE,\n    error: error\n  };\n};\nexport var createThreadSave = function createThreadSave(newThread) {\n  return {\n    type: CREATE_THREAD_SAVE,\n    name: newThread.name,\n    content: newThread.content\n  };\n};\nexport var createThreadToggle = function createThreadToggle() {\n  return {\n    type: CREATE_THREAD_TOGGLE\n  };\n};\nexport var deleteThread = function deleteThread(id) {\n  return function (dispatch) {\n    dispatch(deleteThreadRequest());\n    deleteThreadApi(id).then(function (response) {\n      dispatch(deleteThreadSuccess()); // re-load thread page\n\n      fetchThreadApi(id).then(function (response) {\n        dispatch(fetchThreadSuccess(response.data));\n      }).catch(function (error) {\n        var errorMessage = apiErrorHandler(error);\n        dispatch(fetchThreadFailure(errorMessage));\n      });\n    }).catch(function (error) {\n      var errorMessage = apiErrorHandler(error);\n      dispatch(deleteThreadFailure(errorMessage));\n    });\n  };\n};\nexport var deleteThreadRequest = function deleteThreadRequest() {\n  return {\n    type: DELETE_THREAD_REQUEST\n  };\n};\nexport var deleteThreadSuccess = function deleteThreadSuccess() {\n  return {\n    type: DELETE_THREAD_SUCCESS\n  };\n};\nexport var deleteThreadFailure = function deleteThreadFailure(error) {\n  return {\n    type: DELETE_THREAD_FAILURE,\n    error: error\n  };\n};","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/actions/thread.js"],"names":["FETCH_THREAD_REQUEST","FETCH_THREAD_SUCCESS","FETCH_THREAD_FAILURE","CREATE_THREAD_REQUEST","CREATE_THREAD_SUCCESS","CREATE_THREAD_FAILURE","CREATE_THREAD_SAVE","CREATE_THREAD_TOGGLE","DELETE_THREAD_REQUEST","DELETE_THREAD_SUCCESS","DELETE_THREAD_FAILURE","fetchThreadApi","createThreadApi","fetchForumApi","deleteThreadApi","fetchForumSuccess","fetchForumFailure","apiErrorHandler","fetchThread","thread","dispatch","fetchThreadRequest","then","response","fetchThreadSuccess","data","catch","error","errorMessage","fetchThreadFailure","type","createThread","newThread","createThreadRequest","createThreadSuccess","forum","createThreadFailure","createThreadSave","name","content","createThreadToggle","deleteThread","id","deleteThreadRequest","deleteThreadSuccess","deleteThreadFailure"],"mappings":"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","sourcesContent":["import {\r\n  FETCH_THREAD_REQUEST,\r\n  FETCH_THREAD_SUCCESS,\r\n  FETCH_THREAD_FAILURE,\r\n  CREATE_THREAD_REQUEST,\r\n  CREATE_THREAD_SUCCESS,\r\n  CREATE_THREAD_FAILURE,\r\n  CREATE_THREAD_SAVE,\r\n  CREATE_THREAD_TOGGLE,\r\n  DELETE_THREAD_REQUEST,\r\n  DELETE_THREAD_SUCCESS,\r\n  DELETE_THREAD_FAILURE,\r\n} from './types';\r\nimport {\r\n  fetchThreadApi,\r\n  createThreadApi,\r\n  fetchForumApi,\r\n  deleteThreadApi,\r\n} from '../api';\r\nimport {fetchForumSuccess, fetchForumFailure} from './forum';\r\nimport {apiErrorHandler} from '../utils/errorhandler';\r\n\r\nexport const fetchThread = thread => dispatch => {\r\n  dispatch(fetchThreadRequest());\r\n\r\n  fetchThreadApi(thread)\r\n    .then(response => {\r\n      dispatch(fetchThreadSuccess(response.data));\r\n    })\r\n    .catch(error => {\r\n      const errorMessage = apiErrorHandler(error);\r\n      dispatch(fetchThreadFailure(errorMessage));\r\n    });\r\n};\r\n\r\nexport const fetchThreadRequest = () => {\r\n  return {\r\n    type: FETCH_THREAD_REQUEST,\r\n  };\r\n};\r\n\r\nexport const fetchThreadSuccess = thread => {\r\n  return {\r\n    type: FETCH_THREAD_SUCCESS,\r\n    thread,\r\n  };\r\n};\r\n\r\nexport const fetchThreadFailure = error => {\r\n  return {\r\n    type: FETCH_THREAD_FAILURE,\r\n    error,\r\n  };\r\n};\r\n\r\nexport const createThread = newThread => dispatch => {\r\n  dispatch(createThreadRequest(newThread));\r\n\r\n  createThreadApi(newThread)\r\n    .then(response => {\r\n      dispatch(createThreadSuccess(response.data));\r\n\r\n      // re-load forum page\r\n      fetchForumApi(newThread.forum)\r\n        .then(response => {\r\n          dispatch(fetchForumSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n          const errorMessage = apiErrorHandler(error);\r\n          dispatch(fetchForumFailure(errorMessage));\r\n        });\r\n    })\r\n    .catch(error => {\r\n      const errorMessage = apiErrorHandler(error);\r\n      dispatch(createThreadFailure(errorMessage));\r\n    });\r\n};\r\n\r\nexport const createThreadRequest = newThread => {\r\n  return {\r\n    type: CREATE_THREAD_REQUEST,\r\n    newThread,\r\n  };\r\n};\r\n\r\nexport const createThreadSuccess = newThread => {\r\n  return {\r\n    type: CREATE_THREAD_SUCCESS,\r\n    newThread,\r\n  };\r\n};\r\n\r\nexport const createThreadFailure = error => {\r\n  return {\r\n    type: CREATE_THREAD_FAILURE,\r\n    error,\r\n  };\r\n};\r\n\r\nexport const createThreadSave = newThread => {\r\n  return {\r\n    type: CREATE_THREAD_SAVE,\r\n    name: newThread.name,\r\n    content: newThread.content,\r\n  };\r\n};\r\n\r\nexport const createThreadToggle = () => {\r\n  return {\r\n    type: CREATE_THREAD_TOGGLE,\r\n  };\r\n};\r\n\r\nexport const deleteThread = id => dispatch => {\r\n  dispatch(deleteThreadRequest());\r\n\r\n  deleteThreadApi(id)\r\n    .then(response => {\r\n      dispatch(deleteThreadSuccess());\r\n\r\n      // re-load thread page\r\n      fetchThreadApi(id)\r\n        .then(response => {\r\n          dispatch(fetchThreadSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n          const errorMessage = apiErrorHandler(error);\r\n          dispatch(fetchThreadFailure(errorMessage));\r\n        });\r\n    })\r\n    .catch(error => {\r\n      const errorMessage = apiErrorHandler(error);\r\n      dispatch(deleteThreadFailure(errorMessage));\r\n    });\r\n};\r\n\r\nexport const deleteThreadRequest = () => {\r\n  return {\r\n    type: DELETE_THREAD_REQUEST,\r\n  };\r\n};\r\n\r\nexport const deleteThreadSuccess = () => {\r\n  return {\r\n    type: DELETE_THREAD_SUCCESS,\r\n  };\r\n};\r\n\r\nexport const deleteThreadFailure = error => {\r\n  return {\r\n    type: DELETE_THREAD_FAILURE,\r\n    error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { CREATE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE } from './types';\nimport { createPostApi, fetchThreadApi, deletePostApi } from '../api';\nimport { fetchThreadSuccess, fetchThreadFailure } from './thread';\nimport { apiErrorHandler } from '../utils/errorhandler';\nexport var createPost = function createPost(newPost) {\n  return function (dispatch) {\n    dispatch(createPostRequest());\n    createPostApi(newPost).then(function (response) {\n      dispatch(createPostSuccess()); // re-load thread page\n\n      fetchThreadApi(newPost.thread_id).then(function (response) {\n        dispatch(fetchThreadSuccess(response.data));\n      }).catch(function (error) {\n        var errorMessage = apiErrorHandler(error);\n        dispatch(fetchThreadFailure(errorMessage));\n      });\n    }).catch(function (error) {\n      var errorMessage = apiErrorHandler(error);\n      dispatch(createPostFailure(errorMessage));\n    });\n  };\n};\nexport var createPostRequest = function createPostRequest(newPost) {\n  return {\n    type: CREATE_POST_REQUEST\n  };\n};\nexport var createPostSuccess = function createPostSuccess() {\n  return {\n    type: CREATE_POST_SUCCESS\n  };\n};\nexport var createPostFailure = function createPostFailure(error) {\n  return {\n    type: CREATE_POST_FAILURE,\n    error: error\n  };\n};\nexport var deletePost = function deletePost(id, threadID) {\n  return function (dispatch) {\n    dispatch(deletePostRequest(id));\n    deletePostApi(id).then(function (response) {\n      dispatch(deletePostSuccess(id)); // re-load thread page\n\n      fetchThreadApi(threadID).then(function (response) {\n        dispatch(fetchThreadSuccess(response.data));\n      }).catch(function (error) {\n        var errorMessage = apiErrorHandler(error);\n        dispatch(fetchThreadFailure(errorMessage));\n      });\n    }).catch(function (error) {\n      var errorMessage = apiErrorHandler(error);\n      dispatch(deletePostFailure(id, errorMessage));\n    });\n  };\n};\nexport var deletePostRequest = function deletePostRequest(id) {\n  return {\n    type: DELETE_POST_REQUEST,\n    id: id\n  };\n};\nexport var deletePostSuccess = function deletePostSuccess(id) {\n  return {\n    type: DELETE_POST_SUCCESS,\n    id: id\n  };\n};\nexport var deletePostFailure = function deletePostFailure(id, error) {\n  return {\n    type: DELETE_POST_FAILURE,\n    id: id,\n    error: error\n  };\n};","map":{"version":3,"sources":["/Users/khanhpn/Project/freelancer/rengorum/frontend/src/actions/post.js"],"names":["CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","createPostApi","fetchThreadApi","deletePostApi","fetchThreadSuccess","fetchThreadFailure","apiErrorHandler","createPost","newPost","dispatch","createPostRequest","then","response","createPostSuccess","thread_id","data","catch","error","errorMessage","createPostFailure","type","deletePost","id","threadID","deletePostRequest","deletePostSuccess","deletePostFailure"],"mappings":"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","sourcesContent":["import {\r\n  CREATE_POST_REQUEST,\r\n  CREATE_POST_SUCCESS,\r\n  CREATE_POST_FAILURE,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  DELETE_POST_FAILURE,\r\n} from './types';\r\nimport {createPostApi, fetchThreadApi, deletePostApi} from '../api';\r\nimport {fetchThreadSuccess, fetchThreadFailure} from './thread';\r\nimport {apiErrorHandler} from '../utils/errorhandler';\r\n\r\nexport const createPost = newPost => dispatch => {\r\n  dispatch(createPostRequest());\r\n\r\n  createPostApi(newPost)\r\n    .then(response => {\r\n      dispatch(createPostSuccess());\r\n\r\n      // re-load thread page\r\n      fetchThreadApi(newPost.thread_id)\r\n        .then(response => {\r\n          dispatch(fetchThreadSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n          const errorMessage = apiErrorHandler(error);\r\n          dispatch(fetchThreadFailure(errorMessage));\r\n        });\r\n    })\r\n    .catch(error => {\r\n      const errorMessage = apiErrorHandler(error);\r\n      dispatch(createPostFailure(errorMessage));\r\n    });\r\n};\r\n\r\nexport const createPostRequest = newPost => {\r\n  return {\r\n    type: CREATE_POST_REQUEST,\r\n  };\r\n};\r\n\r\nexport const createPostSuccess = () => {\r\n  return {\r\n    type: CREATE_POST_SUCCESS,\r\n  };\r\n};\r\n\r\nexport const createPostFailure = error => {\r\n  return {\r\n    type: CREATE_POST_FAILURE,\r\n    error,\r\n  };\r\n};\r\n\r\nexport const deletePost = (id, threadID) => dispatch => {\r\n  dispatch(deletePostRequest(id));\r\n\r\n  deletePostApi(id)\r\n    .then(response => {\r\n      dispatch(deletePostSuccess(id));\r\n\r\n      // re-load thread page\r\n      fetchThreadApi(threadID)\r\n        .then(response => {\r\n          dispatch(fetchThreadSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n          const errorMessage = apiErrorHandler(error);\r\n          dispatch(fetchThreadFailure(errorMessage));\r\n        });\r\n    })\r\n    .catch(error => {\r\n      const errorMessage = apiErrorHandler(error);\r\n      dispatch(deletePostFailure(id, errorMessage));\r\n    });\r\n};\r\n\r\nexport const deletePostRequest = id => {\r\n  return {\r\n    type: DELETE_POST_REQUEST,\r\n    id,\r\n  };\r\n};\r\n\r\nexport const deletePostSuccess = id => {\r\n  return {\r\n    type: DELETE_POST_SUCCESS,\r\n    id,\r\n  };\r\n};\r\n\r\nexport const deletePostFailure = (id, error) => {\r\n  return {\r\n    type: DELETE_POST_FAILURE,\r\n    id,\r\n    error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}